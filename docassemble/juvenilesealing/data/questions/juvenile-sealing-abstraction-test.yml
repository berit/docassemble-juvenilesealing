---
comment: |
  TODO: Fix juvenile-sealing.yml `and` conviction statements
---
comment: |
  Don't ask personal info until we know they want to print the form.
---
features:
  question back button: True
---
modules:
  - .juvenile_sealing_check_continue
---
comment: |
  Do objects always need to be in their own file?
  If I do `objects from file`, will that also pull
  in the logic below or do I have to import that separately?
comment: |
  Should `applicant` be `user` instead, even though the
  questions are about the applicant?
objects:
  - applicant: Individual
  - user: DAObject
  - ineligibility_reasons: DAObject
  - ineligibility_reasons.has_NON_probation_open_cases: DAObject
  - ineligibility_reasons.has_probation: DAObject
  - ineligibility_reasons.convicted_in_past_3_years: DAObject
---
code: |
  # ### Creating reasons ####
  # ? Better place to put this?
  ineligibility_reasons.has_NON_probation_open_cases.sure = "you have open cases"
  ineligibility_reasons.has_NON_probation_open_cases.unsure = "you might have open cases"
  ineligibility_reasons.has_probation.sure = "you're on probation"
  ineligibility_reasons.has_probation.unsure = "you might be on probation"
  ineligibility_reasons.convicted_in_past_3_years.sure = "you've had a conviction or adjudication in the last three years"
  ineligibility_reasons.convicted_in_past_3_years.unsure = "you might have had a conviction or adjudication in the last three years"
---
code: |

  # ### Base logic for all juvenile sealing

  def isEligible():

    can_seal_juvenile_records = False

    # .Handle motor vehicle offense or not?

    # .Logic required to fill out form
    if (
           not user.has_open_case
           and not user.adult_convicted_in_past_3_years
           and not user.juvenile_adjudicated_in_past_3_years
           #and not user.juvenile_dismissed_less_than_3_yrs_ago
       ):
        can_seal_juvenile_records = True

    return can_seal_juvenile_records

  # ### Brainstorming for future user-facing form
  # .Should we ask if they even have a juvenile record? Probably not.
  # .from warning at beginning (or anywhere?). Goes in `if` statements.
  # wants_to_not_finish_form
  # any_open_cases
  # on_probation
  # .Not sure whether to handle motor vehicle offense or not
  # any_closed_case_is_not_excludable  # motor vehicle <$50
  # most_recent_adult_or_juvenile_conviction_date
  # most_recent_juvenile_dismissed_date
  # .Should we ask individually about federal, state, and
  # .out-of-state cases separately?

---
mandatory: True
id: flow
code: |

  #if (not wants_to_start):
  #  sorry
  
  # ### Check for open cases ####
  
  # .These are the things we want to find out
  user.has_NON_probation_open_cases = False
  user.has_probation = False
  user.has_open_case = False

  if (
         user.has_NON_probation_open_cases_ma == 'True'
         or user.has_NON_probation_open_cases_other_state == 'True'
         or user.has_NON_probation_open_cases_federal == 'True'
     ):
      user.has_NON_probation_open_cases = True
  check_if_user_wants_to_continue(user, 'has_NON_probation_open_cases', ineligibility_reasons)
  
  if (
         user.has_probation_ma == 'True'
         or user.has_probation_other_state == 'True'
         or user.has_probation_federal == 'True'
     ):
       user.has_probation = True
  check_if_user_wants_to_continue(user, 'has_probation', ineligibility_reasons)

  if (user.has_probation or user.has_NON_probation_open_cases):
    user.has_open_case = True
  else:
    user.has_open_case = False


  # ### Check convictions and adjudications ####

  # .These are the things we want to find out
  user.convicted_in_past_3_years = False
  user.adult_convicted_in_past_3_years = False
  user.juvenile_adjudicated_in_past_3_years = False

  if (
         user.convicted_in_past_3_years_ma == 'True'
         or user.convicted_in_past_3_years_other_state == 'True'
         or user.convicted_in_past_3_years_federal == 'True'
     ):
       user.convicted_in_past_3_years = True
       user.adult_convicted_in_past_3_years = True
       user.juvenile_adjudicated_in_past_3_years = True
  check_if_user_wants_to_continue(user, 'convicted_in_past_3_years', ineligibility_reasons)

  is_eligible = isEligible()
  
  download

---
id: intro
field: wants_to_start
question: Can You Seal Your Juvenile Record?
subquestion: |
  You might be able to seal your juvenile record. This is what we'll do:
  
  1. We'll ask questions about your open cases and old cases.
  1. We'll tell you if you have a good chance of getting your record sealed.
  1. We'll ask if you want us to fill out your form (petition).
  1. If you say yes, we'll ask you questions about yourself like your name and social security number.
  1. We'll make a form (petition) for you to download, print, and sign.
  1. We'll tell you where to mail the petition to.

  To you want to keep going?
buttons:
  - Yes: True
  - No: False
---
id: NON_probation_open_cases
question: |
  Open Cases
fields: 
  - note: Do you have any open cases in Massachusetts?
  - no label: user.has_NON_probation_open_cases_ma
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Do you have any open cases in another state?
  - no label: user.has_NON_probation_open_cases_other_state
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Do you have any open federal cases?
  - no label: user.has_NON_probation_open_cases_federal
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
---
id: probation
question: |
  Probation
subquestion: |
  If you're on probation it means your case is open.
fields: 
  - note: Are you on probation in Massachusetts?
  - no label: user.has_probation_ma
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Are you on probation in another state?
  - no label: user.has_probation_other_state
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Are you on probation for any federal crimes?
  - no label: user.has_probation_federal
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
---
id: old_convictions
question: Old Convictions
subquestion: |
  Note: An adjudication counts as a conviction here. It's a conviction for juveniles.
fields: 
  - note: Have you had any adult or juvenile convictions in Massachusetts on or after ${ today().minus(years=3) }?
  - no label: user.convicted_in_past_3_years_ma
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Have you had any adult or juvenile convictions in another state on or after ${ today().minus(years=3) }?
  - no label: user.convicted_in_past_3_years_other_state
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
  - note: Have you had any adult or juvenile convictions for any federal crimes on or after ${ today().minus(years=3) }?
  - no label: user.convicted_in_past_3_years_federal
    input type: radio
    choices:
      - Yes: True
      - No: False
      - I don't know: 'unsure'
---
id: petition
question: Your Petition
event: download
comment: |
  Replace file name with customized file name?
attachment:
  - name: juvenile-criminal-sealing-petition
    filename: juvenile-criminal-sealing-petition
    pdf template file: juvenile-criminal-sealing-petition.pdf
    fields:
      - "juvenile_cases": No
      - "misdemeanors": No
      - "felonies": No
      - "decriminalized": No
      - "dob": something
      - "last_name": something
      - "middle_name": something
      - "first_name": something
      - "aliases": something
      - "street_address": something
      - "city": something
      - "state": something
      - "zipcode": something
      - "occupation": something
      - "ssn": something
      - "place_of_birth": something
      - "father_maiden_name": something
      - "mother_maiden_name": something
      - "mother_maiden_name_2": something
      - "spouse_maiden_name": something
      - "upper_signature": something
      - "signature_checkbox_1": No
      - "lower_signature_1": something
      - "signature_checkbox_2": No
      - "signature_checkbox_3": No
      - "lower_signature_2": something
buttons:
  - Exit: exit
  - Restart: restart
---
comment:  has_open_case ${has_open_case}
---
id: not_helped
event: sorry
question: |
  Thank you and sorry we couldn't help.
comment: |
  TODO: Add more resources they can go to.
buttons:
  - Exit: exit
  - Restart: restart

---
comment: |
  Abstractions for stopping.

---
comment: |
  code: |
  def check_if_user_wants_to_continue(user, criteria_name):
    debug1 = False
    debug2 = False
    if (debug1): log('criteria_name: ' + criteria_name, 'console')

    level_of_certainty = None

    ma_name = criteria_name + '_ma'
    other_state_name = criteria_name + '_other_state'
    federal_name = criteria_name + '_federal'

    is_ineligible = getattr(user, criteria_name)

    if (debug1): log('is_ineligible:', 'console')
    if (debug1): log(is_ineligible, 'console')

    if (is_ineligible):
      level_of_certainty = 'sure'

    elif (
             getattr(user, ma_name) == 'unsure'
             or getattr(user, other_state_name) == 'unsure'
             or getattr(user, federal_name) == 'unsure'
         ):
          level_of_certainty = 'unsure'

    if (not level_of_certainty is None):
      if (debug1): log('level_of_certainty:', 'console')
      if (debug1): log(level_of_certainty, 'console')

      these_ineligibility_reasons = getattr(ineligibility_reasons, criteria_name)

      if (debug2): log('these_ineligibility_reasons:', 'console')
      if (debug2): log(type(these_ineligibility_reasons), 'console')

      ineligibility_reason = getattr(these_ineligibility_reasons, level_of_certainty)
      if (debug2): log('ineligibility_reason:', 'console')
      if (debug2): log(ineligibility_reason, 'console')

      wants_to_continue = ask_continue_with(level_of_certainty, ineligibility_reason, user)

      if (not wants_to_continue):
        if (debug2): log('does NOT want to continue', 'console')
        value('sorry')
      else:
        if (debug2): log('doesn\'t not want to continue', 'console')

---
id: wants_to_continue_despite_uncertainty
field: wants_to_continue_despite_uncertainty
question: Might Not Be Eligible
subquestion: |
  Because **${user.reason_for_ineligibility}** we think you **might not** be able to seal your juvenile record.
  
  Do you want to try anyway?
buttons:
  - Yes: True
  - No: False

---
id: wants_to_continue_despite_ineligibility
field: wants_to_continue_despite_ineligibility
question: Probably Not Eligible
subquestion: |
  Sorry, but because **${user.reason_for_ineligibility}** we think you **probably won't** be able to seal your juvenile record.
  
  Do you want to try anyway?
buttons:
  - Yes: True
  - No: False

---
comment: |
  id: ask_continue_with
  code: |
  # .There are some reasons why this isn't a great way to do this.
  # ..It's not going to be easy to change in the future.
  # ..If there's trouble, consider a class.
  

  def ask_continue_with( level_of_certainty, reason ):
    debug1 = False
    debug2 = False
  
    wants_to_continue = True
  
    if (debug1): log('**** level of certainty:', 'console')
    if (debug1): log(level_of_certainty, 'console')

    
    if (level_of_certainty == 'sure'):
      if (debug1): log('****getting into `sure`?', 'console')

      user.reason_for_ineligibility = reason
      # .If it's defined already, it won't be asked
      wants_to_continue = value('wants_to_continue_despite_ineligibility')

      if (debug1): log('****continue sure value:', 'console')
      if (debug1): log(wants_to_continue, 'console')

    elif (level_of_certainty == 'unsure'):
      if (debug1): log('****getting into `unsure`?', 'console')

      # .If already answered the more extreme question, we
      # ..shouldn't ask them this one
      if (not defined('wants_to_continue_despite_ineligibility')):

          user.reason_for_ineligibility = reason
          # .If it's defined already, it won't be asked
          wants_to_continue = value('wants_to_continue_despite_uncertainty')
          if (debug1): log('****continue unsure value:', 'console')
          if (debug1): log(wants_to_continue, 'console')

    else:
      raise Exception("`level_of_certainty` of ineligibility has unhandled value:" + level_of_certainty)

    if (debug2): log(wants_to_continue, 'console')
    return wants_to_continue

---